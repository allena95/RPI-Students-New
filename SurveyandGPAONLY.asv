%% DATUM RPI Students - Predict leaving Spring 2015
clear;
close all;

%% Only Survey Data
[num2,txt2,raw2] = xlsread('NoCoursesWithGPA2.xlsx');

data2 = [num2(:,2:33) num2(:,46)];

data2 = data2(~any(isnan(data2),2),:); %remove students with missing data

features2 = [data2(:,1:end-1)];
label2 = data2(:,end);

[fisherror2,Train2,Test2,w2,t2,perror2,merror2,error_total2] = ...
classifier(features2,label2,.75);

%Fisher: 34% Train, 39% Test,  ~62% error on leave test
%KNN: 18.71% error, 84% leave error


%%
[num,txt,raw] = xlsread('featurenamesSurvey.xlsx');
names = txt;
A = w2;
[m,n] = size(A);
%A = abs(A);
[I,B] = sort(abs(A),'descend');

for i = 1:m
    display(sprintf('Feature %d: %s   Score: %d',i, char(names(B(i))),A(B(i))))
end;

%% Confusion Matrix for Survey Only
Y_f2 = nan(size(Test2,1),1);
for i = 1:size(Test2,1);
    if Test2(i,1:end-1)*w2<=t2;
        Y_f2(i) = 0;
    end
    if Test2(i,1:end-1)*w2>=t2;
        Y_f2(i)=1;
    end
end


C_f2 = confusionmat(Test2(:,end),Y_f2)


%% Only GPA
[num3,txt3,raw3] = xlsread('NoCoursesWithGPA.xlsx');

data3 = [num3(:,45:47) num3(:,50:51) num3(:,49)];

data3 = data3(~any(isnan(data3),2),:); %remove students with missing data

features3 = data3(:,1:end-1);
label3 = data3(:,end);

[fisherror3,Train3,Test3,w3,t3,perror3,merror3,error_total3] = ...
classifier(features3,label3,.75);

%Fisher: 17% error Train, 17% error Test, 50% leave test error
%KNN: 5.5% error, 60% leave error
%%
[num,txt,raw] = xlsread('featurenamesGPA.xlsx');
names = txt;
A = w3;
[m,n] = size(A);
%A = abs(A);
[I,B] = sort(abs(A),'descend');

for i = 1:m
    display(sprintf('Feature %d: %s   Score: %d',i, char(names(B(i))),A(B(i))))
end;

%% Confusion Matrix for GPA Only
Y_f3 = nan(size(Test3,1),1);
for i = 1:size(Test3,1);
    if Test3(i,1:end-1)*w3<=t3;
        Y_f3(i) = 0;
    end
    if Test3(i,1:end-1)*w3>=t3;
        Y_f3(i)=1;
    end
end


C_f3 = confusionmat(Test3(:,end),Y_f3)


%% Classification of S15 using significant features from T-Test


[num,txt,raw] = xlsread('DataWQ2.xlsx');

data = num(:,2:end);
want = [data(:,6) data(:,14) data(:,20) data(:,21) data(:,26) data(:,33) data(:,35:37) data(:,40:43) data(:,end) data(:,39)];

want = want(~any(isnan(want),2),:); %remove students with missing data

features = want(:,1:end-1);
labels = want(:,end);


[fisherror4,Train4,Test4,w4,t4,perror4,merror4,error_total4] = ...
classifier(features,labels,.75);

%Train error 17.95%, Test error 15.75%
%Leave error for both train and test < 40%
%%

s=std(features);
a = diag(1./s);
[m,n] = size(features);
one_m = ones(m,m);

features = (features - (1/m)*(ones(m,m)*features))*a;




nC = 4;

% Do k-means with 10 restarts. 
opts = statset('Display','final');
[cidx, ctrs, SUMD, D]= kmeans(features, nC,'Replicates',10,'Options',opts);

% K=means objective
objective = sum(SUMD);

[eigenvectors, scores, eigenvalues] = pca(features);
explainedVar = cumsum(eigenvalues./sum(eigenvalues) * 100);
figure
bar(explainedVar)

%%
figure
imagesc(ctrs)
title('Cluster Centers')
colorbar

%% Confusion Matrix for sig S15 prediction
Y_f4 = nan(size(Test4,1),1);
for i = 1:size(Test4,1);
    if Test4(i,1:end-1)*w4<=t4;
        Y_f4(i) = 0;
    end
    if Test4(i,1:end-1)*w4>=t4;
        Y_f4(i)=1;
    end
end


C_f4 = confusionmat(Test4(:,end),Y_f4)


%% List Features for S15 prediction in order of weight

[num,txt,raw] = xlsread('Significant Features S15.xlsx');
names = txt;
A = w4;
[m,n] = size(A);
%A = abs(A);
[I,B] = sort(abs(A),'descend');

for i = 1:m
    display(sprintf('Feature %d: %s   Score: %d',i, char(names(B(i))),A(B(i))))
end;



%% Classification of Ever Left Using Sig Features from T-Test

[num,txt,raw] = xlsread('DataWQ2.xlsx');

data = num(:,2:end);
want = [data(:,6) data(:,8) data(:,14) data(:,20) data(:,21) data(:,26) data(:,33) data(:,35) data(:,37) data(:,41:43) data(:,end) data(:,44)];

want = want(~any(isnan(want),2),:); %remove students with missing data

features5 = want(:,1:end-1);
labels5 = want(:,end);


[fisherror5,Train5,Test5,w5,t5,perror5,merror5,error_total5] = ...
classifier(features5,labels5,.75);
%% Confusion matrix for sig ever leave prediction 

Y_f5 = nan(size(Test5,1),1);
for i = 1:size(Test5,1);
    if Test5(i,1:end-1)*w5<=t5;
        Y_f5(i) = 0;
    end
    if Test5(i,1:end-1)*w5>=t5;
        Y_f5(i)=1;
    end
end


C_f5 = confusionmat(Test5(:,end),Y_f5)






%% List Features in order of weight
[num,txt,raw] = xlsread('Significant FeaturesEver.xlsx');
names = txt;
A = w5;
[m,n] = size(A);
%A = abs(A);
[I,B] = sort(abs(A),'descend');

for i = 1:m
    display(sprintf('Feature %d: %s   Score: %d',i, char(names(B(i))),A(B(i))))
end;
